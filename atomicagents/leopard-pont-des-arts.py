from typing import Union, Optional, List
import openai
from pydantic import Field
from atomic_agents.agents.base_agent import BaseAgent, BaseAgentConfig
from atomic_agents.lib.base.base_io_schema import BaseIOSchema
from atomic_agents.lib.components.agent_memory import AgentMemory
from atomic_agents.lib.components.system_prompt_generator import (
    SystemPromptGenerator,
    SystemPromptContextProviderBase,
)
import os
from dotenv import load_dotenv

load_dotenv()

from tavily_search.tool.tavily_search import (
    TavilySearchTool,
    TavilySearchToolConfig,
    TavilySearchToolInputSchema,
    TavilySearchToolOutputSchema,
)

from calculator.tool.calculator import (
    CalculatorTool,
    CalculatorToolConfig,
    CalculatorToolInputSchema,
    CalculatorToolOutputSchema,
)

import instructor
from datetime import datetime


########################
# INPUT/OUTPUT SCHEMAS #
########################
class SolverInputSchema(BaseIOSchema):
    """Input schema for the Solver Agent. Contains the user's message to be processed."""

    chat_message: str = Field(
        ..., description="The user's input message to be analyzed and responded to."
    )


class SolverOutputSchema(BaseIOSchema):
    """Combined output schema for the Solver Agent. Contains the tool to use and its parameters."""

    think: str = Field(..., description="Thinking process for the tool selection and parameters")
    tool: str = Field(..., description="The tool to use: 'search' or 'calculator'")
    tool_parameters: Union[TavilySearchToolInputSchema, CalculatorToolInputSchema] = (
        Field(..., description="The parameters for the selected tool")
    )


class FinalAnswerSchema(BaseIOSchema):
    """Schema for the final answer generated by the Solver Agent."""

    final_answer: str = Field(
        ...,
        description="The final answer generated based on the tool outputs and user query.",
    )


#######################
# AGENT CONFIGURATION #
#######################
class SolverAgentConfig(BaseAgentConfig):
    """Configuration for the Solver Agent."""

    tavily_config: TavilySearchToolConfig
    calculator_config: CalculatorToolConfig


#####################
# CONTEXT PROVIDERS #
#####################
class CurrentDateProvider(SystemPromptContextProviderBase):
    def __init__(self, title):
        super().__init__(title)
        self.date = datetime.now().strftime("%Y-%m-%d")

    def get_info(self) -> str:
        return f"Current date in format YYYY-MM-DD: {self.date}"


######################
# Solver AGENT #
######################
solver_agent = BaseAgent(
    BaseAgentConfig(
        client=instructor.from_openai(
            openai.OpenAI(
                api_key=os.getenv("API_KEY"),
                # base_url="https://granite-3-8b-instruct-maas-apicast-production.apps.prod.rhoai.rh-aiservices-bu.com:443/v1",
                base_url="http:/localhost:8000/v1",
            )
        ),
        # model="granite-3-8b-instruct",
        model="/var/home/instruct/.cache/instructlab/models/Qwen/Qwen2.5-Coder-32B-Instruct",
        system_prompt_generator=SystemPromptGenerator(
            background=[
                "You are a Solver Agent that takes user input, searches for relevant information to solve the given problem.",
                "Use the search tool for queries requiring factual information, current events, or specific data.",
                "After search use the calculator tool for mathematical calculations and expressions.",
            ],
            output_instructions=[
                "Analyze the input to determine what information is needed. For search queries, use the 'search' tool and provide 1-3 relevant search queries.",
                "For calculations, use the 'calculator' tool.",
                "Format the output using the appropriate schema.",
            ],
        ),
        input_schema=SolverInputSchema,
        output_schema=SolverOutputSchema,
    )
)

# Register the current date provider
solver_agent.register_context_provider(
    "current_date", CurrentDateProvider("Current Date")
)


def execute_tool(
    tavily_tool: TavilySearchTool,
    calculator_tool: CalculatorTool,
    Solver_output: SolverOutputSchema,
) -> Union[TavilySearchToolOutputSchema, CalculatorToolOutputSchema]:
    if Solver_output.tool == "search":
        return tavily_tool.run(Solver_output.tool_parameters)
    elif Solver_output.tool == "calculator":
        return calculator_tool.run(Solver_output.tool_parameters)
    else:
        raise ValueError(f"Unknown tool: {Solver_output.tool}")


class SearchResultItemSchema(BaseIOSchema):
    """This schema represents a single search result item"""

    query: Optional[str] = Field(
        ..., description="The query used to obtain this search result"
    )
    answer: Optional[str] = Field(
        ..., description="The answer to the query provided by Tavily"
    )


class SearchResultsSchema(BaseIOSchema):
    """This schema represents the search results."""

    results: List[SearchResultItemSchema] = Field(
        ..., description="List of search result items"
    )


#################
# EXAMPLE USAGE #
#################
if __name__ == "__main__":
    from rich.console import Console
    from rich.panel import Panel
    from rich.syntax import Syntax

    # Set up the OpenAI client
    client = instructor.from_openai(
        openai.OpenAI(
            api_key=os.getenv("API_KEY"),
            base_url="https://granite-3-8b-instruct-maas-apicast-production.apps.prod.rhoai.rh-aiservices-bu.com:443/v1",
        )
    )

    # Initialize the tools
    tavily_tool = TavilySearchTool(
        config=TavilySearchToolConfig(
            api_key=os.getenv("TVLY_KEY"),
            max_results=1,
            include_query=True,
            include_answer=True,
        )
    )
    calculator_tool = CalculatorTool(CalculatorToolConfig())

    # Initialize Rich console
    console = Console()

    # Print the full system prompt
    console.print(
        Panel(
            solver_agent.system_prompt_generator.generate_prompt(),
            title="System Prompt",
            expand=False,
        )
    )
    console.print("\n")

    # Example inputs
    inputs = [
        "How many seconds would it take for a leopard at full speed to run through Pont des Arts?",
    ]

    for user_input in inputs:
        console.print(
            Panel(f"[bold cyan]User Input:[/bold cyan] {user_input}", expand=False)
        )

        # Create the input schema
        input_schema = SolverInputSchema(chat_message=user_input)

        # Print the input schema
        console.print("\n[bold yellow]Generated Input Schema:[/bold yellow]")
        input_syntax = Syntax(
            str(input_schema.model_dump_json(indent=2)),
            "json",
            theme="monokai",
            line_numbers=True,
        )
        console.print(input_syntax)

        # Run the Solver to get the tool selection and input
        Solver_output = solver_agent.run(input_schema)

        # Print the Solver output
        console.print("\n[bold magenta]Solver Output:[/bold magenta]")
        Solver_syntax = Syntax(
            str(Solver_output.model_dump_json(indent=2)),
            "json",
            theme="monokai",
            line_numbers=True,
        )
        console.print(Solver_syntax)

        # Run the selected tool
        response = execute_tool(tavily_tool, calculator_tool, Solver_output)

        # Print the tool output
        console.print("\n[bold green]Tool Output:[/bold green]")
        output_syntax = Syntax(
            str(response.model_dump_json(indent=2)),
            "json",
            theme="monokai",
            line_numbers=True,
        )
        console.print(output_syntax)

        filtered_response = SearchResultsSchema(
            results=[
                SearchResultItemSchema(query=item.query, answer=item.answer)
                for item in response.results
            ]
        )

        solver_agent.memory.add_message("system", filtered_response)

        # Run the Solver to get the tool selection and input
        Solver_output = solver_agent.run(input_schema)

        # Print the Solver output
        console.print("\n[bold magenta]Solver Output:[/bold magenta]")
        Solver_syntax = Syntax(
            str(Solver_output.model_dump_json(indent=2)),
            "json",
            theme="monokai",
            line_numbers=True,
        )
        console.print(Solver_syntax)
        
        print(Solver_output)

        response = execute_tool(tavily_tool, calculator_tool, Solver_output)

        # Print the tool output
        console.print("\n[bold green]Tool Output:[/bold green]")
        output_syntax = Syntax(
            str(response.model_dump_json(indent=2)),
            "json",
            theme="monokai",
            line_numbers=True,
        )
        console.print(output_syntax)

        console.print("\n" + "-" * 80 + "\n")

        solver_agent.output_schema = FinalAnswerSchema
        solver_agent.memory.add_message("system", response)
        final_answer = solver_agent.run(input_schema)
        console.print(
            f"\n[bold blue]Final Answer:[/bold blue] {final_answer.final_answer}"
        )
        solver_agent.output_schema = SolverOutputSchema

        # Reset the memory after each response
        solver_agent.memory = AgentMemory()
